this file is for the ChatControler in controllers
package com.traffictracking.controller;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.RestClientException;

import java.util.HashMap;
import java.util.Map;
import java.util.List;

@RestController
@RequestMapping("/api/chat")
@CrossOrigin(origins = "http://localhost:3000", allowedHeaders = "*", methods = {RequestMethod.GET, RequestMethod.POST})  // Updated CORS configuration
public class ChatController {
    @Value("${openai.api.key}")
    private String openAiApiKey;

    private final String OPENAI_URL = "https://api.openai.com/v1/chat/completions";
    private final RestTemplate restTemplate = new RestTemplate();

    @PostMapping("/ask")
    public Map<String, Object> askAI(@RequestBody Map<String, String> request) {
        try {
            String userInput = request.get("message");
            if (userInput == null || userInput.trim().isEmpty()) {
                Map<String, Object> errorResponse = new HashMap<>();
                errorResponse.put("error", "Message cannot be empty");
                return errorResponse;
            }

            // Create headers
            HttpHeaders headers = new HttpHeaders();
            headers.set("Authorization", "Bearer " + openAiApiKey);
            headers.set("Content-Type", "application/json");

            // Create request body
            Map<String, Object> body = new HashMap<>();
            body.put("model", "gpt-3.5-turbo");

            // Create message map
            Map<String, String> messageMap = new HashMap<>();
            messageMap.put("role", "user");
            messageMap.put("content", userInput);

            body.put("messages", new Object[]{messageMap});
            body.put("max_tokens", 100);

            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(body, headers);

            // Make API call
            ResponseEntity<Map> response = restTemplate.exchange(OPENAI_URL, HttpMethod.POST, entity, Map.class);
            Map<String, Object> responseBody = response.getBody();

            if (responseBody == null) {
                Map<String, Object> errorResponse = new HashMap<>();
                errorResponse.put("error", "No response from OpenAI");
                return errorResponse;
            }

            // Extract AI response safely
            List<Map<String, Object>> choices = (List<Map<String, Object>>) responseBody.get("choices");
            if (choices == null || choices.isEmpty()) {
                Map<String, Object> errorResponse = new HashMap<>();
                errorResponse.put("error", "No choices in response");
                return errorResponse;
            }

            Map<String, Object> firstChoice = choices.get(0);
            Map<String, Object> message = (Map<String, Object>) firstChoice.get("message");
            if (message == null) {
                Map<String, Object> errorResponse = new HashMap<>();
                errorResponse.put("error", "No message in response");
                return errorResponse;
            }

            String content = (String) message.get("content");
            if (content == null) {
                Map<String, Object> errorResponse = new HashMap<>();
                errorResponse.put("error", "No content in message");
                return errorResponse;
            }

            Map<String, Object> successResponse = new HashMap<>();
            successResponse.put("response", content);
            return successResponse;

        } catch (RestClientException e) {
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("error", "Failed to communicate with OpenAI: " + e.getMessage());
            return errorResponse;
        } catch (Exception e) {
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("error", "An unexpected error occurred: " + e.getMessage());
            return errorResponse;
        }
    }
}
*************************
After that just goto the application.properties and make and update the variable 
openai.api.key=your api key 
